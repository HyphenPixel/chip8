#pragma once
#include <chip8.h>
#include <stdint.h>
#include <raylib.h>
#include <defines.h>
#include <string.h>

static uint8_t font[] = {
    0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
    0x20, 0x60, 0x20, 0x20, 0x70, // 1
    0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
    0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
    0x90, 0x90, 0xF0, 0x10, 0x10, // 4
    0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
    0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
    0xF0, 0x10, 0x20, 0x40, 0x40, // 7
    0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
    0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
    0xF0, 0x90, 0xF0, 0x90, 0x90, // A
    0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
    0xF0, 0x80, 0x80, 0x80, 0xF0, // C
    0xE0, 0x90, 0x90, 0x90, 0xE0, // D
    0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
    0xF0, 0x80, 0xF0, 0x80, 0x80  // F
};

typedef struct {
    uint8_t     ram[4096];
    uint8_t     vram[64*32];
    uint8_t     v[16];
    uint8_t     sound_timer;
    uint8_t     delay_timer;
    uint8_t     sp;
    uint16_t    stack[16];
    uint16_t    i;
    uint16_t    pc;
    uint16_t    keyboard;
} Chip8;

uint16_t fetch_opcode(Chip8* cpu);
void decode_opcode(Chip8* cpu, uint16_t opcode);
void execute_instruction(Chip8* cpu);
void cycle_cpu(Chip8* cpu, uint64_t cycles);